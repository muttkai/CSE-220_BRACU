Name :Md.Tasnim Muttaki
ID:21101216
Sec: 24

class Node:
  def __init__(self, e, n, p):
    self.element = e
    self.next = n
    self.prev = p


class DoublyList:

    def __init__(self, a):
        # Creates a Non Dummy Headed Circular Doubly Linked List using the values from the given array a.
        # To Do
        if (type(a) == Node):
            self.head.next = a
        else:
            tail = Node(a[0])
            self.head.next = tail
            tail.next = self.head
            self.head.prev = tail
            tail.prev = self.head
            for i in range(1, len(a)):
                n = Node(a[i])
                tail.next = n
                n.prev = tail
                tail = tail.next
            tail.next = self.head
            self.head.prev = tail
        pass  # Remove this line

    # Counts the number of Nodes in the list and return the number
    def countNode(self):
        # To Do
        count = 0
        now = self.head.next
        while now != self.head:
            count += 1
            now = now.next

        return count
        pass  # Remove this line

    # prints the elements in the list
    def forwardprint(self):
        # To Do
        now = self.head.next
        while (now != self.head):

            if (now.next == self.head):
                print(now.element)
            else:
                print(now.element, end=",")
            now = now.next
        pass  # Remove this line

    # prints the elements in the list backward
    def backwardprint(self):
        # To Do
        now = self.head.prev
        while now != self.head:

            if now.prev == self.head:
                print(now.element)
            else:
                print(now.element, end=",")

            now = now.prev
        pass  # Remove this line

    # returns the reference of the at the given index. For invalid index return None.
    def nodeAt(self, idx):
        # To Do
        idex = 0
        now = self.head.next

        if (idx < 0 or idx >= self.countNode()):
            return None

        while (now != self.head):
            if (idex == idx):
                return now
            else:
                idex += 1
            now = now.next
        pass  # Remove this line

    # returns the index of the containing the given element. if the element does not exist in the List, return -1.
    def indexOf(self, elem):
        # To Do
        idx = 0
        now = self.head.next
        while (now != self.head):

            if (now.element == elem):
                return idx
            else:
                idx += 1

            now = now.next
        return -1
        pass  # Remove this line

    # inserts containing the given element at the given index Check validity of index.
    def insert(self, elem, idx):
        # To Do
        if idx < 0 or idx > self.countNode():
            return None
        else:
            new_Node = Node(elem)

            if (idx == self.countNode()):
                q = self.head
            else:
                q = self.nodeAt(idx)

            pred = q.prev

            new_Node.next = q
            q.prev = new_Node
            new_Node.prev = pred
            pred.next = new_Node
        pass  # Remove this line

    # removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
    def remove(self, idx):
        # To Do
        if idx < 0 or idx >= self.countNode():
            return None

        removed = self.nodeAt(idx)
        removed.prev.next = removed.next
        removed.next.prev = removed.prev

        removed = str(removed.element)

        return removed
        pass  # Remove this line




print("///  Test 01  ///")
a1 = [10, 20, 30, 40]
h1 = DoublyList(a1) # Creates a linked list using the values from the array

h1.forwardprint() # This should print: 10,20,30,40.
h1.backwardprint() # This should print: 40,30,20,10.
print(h1.countNode()) # This should print: 4

print("///  Test 02  ///")
# returns the reference of the at the given index. For invalid idx return None.
myNode = h1.nodeAt(2)
print(myNode.element) # This should print: 30. In case of invalid index This will print "index error"

print("///  Test 03  ///")
# returns the index of the containing the given element. if the element does not exist in the List, return -1.
index = h1.indexOf(40)
print(index) # This should print: 3. In case of element that
#doesn't exists in the list this will print -1.

print("///  Test 04  ///")

a2 = [10, 20, 30, 40]
h2 = DoublyList(a2) # uses the  constructor
h2.forwardprint() # This should print: 10,20,30,40.

# inserts containing the given element at the given index. Check validity of index.
h2.insert(85,0)
h2.forwardprint() # This should print: 85,10,20,30,40.
h2.backwardprint() # This should print: 40,30,20,10,85.

print()
h2.insert(95,3)
h2.forwardprint() # This should print: 85,10,20,95,30,40.
h2.backwardprint() # This should print: 40,30,95,20,10,80.

print()
h2.insert(75,6)
h2.forwardprint() # This should print: 85,10,20,95,30,40,75.
h2.backwardprint() # This should print: 75,40,30,95,20,10,85.


print("///  Test 05  ///")
a3 = [10, 20, 30, 40, 50, 60, 70]
h3 = DoublyList(a3) # uses the constructor
h3.forwardprint() # This should print: 10,20,30,40,50,60,70.

# removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
print("Removed element: "+ h3.remove(0)) # This should print: Removed element: 10
h3.forwardprint() # This should print: 20,30,40,50,60,70.
h3.backwardprint() # This should print: 70,60,50,40,30,20.
print("Removed element: "+ h3.remove(3)) # This should print: Removed element: 50
h3.forwardprint() # This should print: 20,30,40,60,70.
h3.backwardprint() # This should print: 70,60,40,30,20.
print("Removed element: "+ h3.remove(4)) # This should print: Removed element: 70
h3.forwardprint() # This should print: 20,30,40,60.
h3.backwardprint() # This should print: 60,40,30,20.
